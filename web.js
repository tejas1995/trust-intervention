(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{o:()=>o});let e="https://tejassrinivasan.pythonanywhere.com/";var o=!1,n=[];let i,r,s,a,c=-1,l=null,u=null,d=0,_=1,h=0,b=0;function g(t){h+=t,0==h?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),h>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==h&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),m()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${h}`).show()}function p(t){s=Date.now(),u=t,t?($("#button_decision_correct").attr("activedecision","true"),$("#button_decision_incorrect").removeAttr("activedecision")):($("#button_decision_correct").removeAttr("activedecision"),$("#button_decision_incorrect").attr("activedecision","true")),$("#how_confident_div").show()}function m(){if($("#button_decision_incorrect").removeAttr("activedecision"),$("#button_decision_correct").removeAttr("activedecision"),$("#button_decision_incorrect").removeAttr("disabled"),$("#button_decision_correct").removeAttr("disabled"),$("#range_val").removeAttr("disabled"),$("#how_confident_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),$("#range_text").text("-"),$("#range_val").val(3),c+=1,c>=n.length)return $("#main_box_experiment").hide(),void(o?$("#main_box_end_mock").show():$("#main_box_end").show());if(l=n[c],$("#question_span").html(l.question),$("#answer_span").html(l.answer),$("#confidence_span").html(l.ai_confidence),l.hasOwnProperty("reward_ratio")){let[t,e]=l.reward_ratio;t=Number(t),e=Number(e),_=t/e}else _=1;r=Date.now(),$("#progress").text(`Progress: ${c+1} / ${n.length}`)}$("#button_instructions_next").on("click",(()=>g(1))),$("#button_instructions_prev").on("click",(()=>g(-1))),$("#button_next").on("click",(()=>{if(-1!=c){let t={question_i:c,user_balance:d,user_bet_val:i,user_decision:u};t.times={decision:s-r,bet:a-s,next:Date.now()-a},t.question=l,t.count_exited_page=b,async function(t){if(o)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("logged",t),console.log("Logging to",e+"log");try{return await $.ajax(e+"log",{data:JSON.stringify({project:"trust-intervention",uid:globalThis.uid,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),b=0}m()})),$("#range_val").on("input change",(function(){i=$(this).val()/5*.1,$("#range_text").text(`If you are right, you get $${(i*_).toFixed(2)}. If you are wrong, you lose $${(i/1).toFixed(2)}.`),$("#button_place_bet").show()})),$("#button_decision_correct").on("click",(()=>p(!0))),$("#button_decision_incorrect").on("click",(()=>p(!1))),$("#button_place_bet").on("click",(function(){a=Date.now();let t,e="You guessed that the system was ";u?(e+="<span class='color_correct'>correct</span> ",l.ai_is_correct?(e+="and the system was <span class='color_correct'>correct</span>.",t=!0):(e+="but the system was <span class='color_incorrect'>not correct</span>.",t=!1)):(e+="<span class='color_incorrect'>incorrect</span> ",l.ai_is_correct?(e+="but the system was <span class='color_correct'>correct</span>.",t=!1):(e+="and the system was <span class='color_incorrect'>not correct</span>.",t=!0)),e+="<br>",t?(e+=`You gain $${(i*_).toFixed(2)}.`,d+=i*_):(e+=`You lose $${(i/1).toFixed(2)}.`,d-=i/1,d=Math.max(0,d)),$("#balance").text(`Balance: $${d.toFixed(2)} + $0.5`),$("#result_span").html(e),$("#button_next").show(),$("#result_span").show(),$("#button_place_bet").hide(),$("#range_val").attr("disabled","true"),$("#button_decision_incorrect").attr("disabled","true"),$("#button_decision_correct").attr("disabled","true")}));const w=new URLSearchParams(window.location.search),v=w.get("start"),f=w.get("uid");if(globalThis.url_data=function(t){const e={};for(const[o,n]of t)e[o]=n;return e}(w.entries()),null!=f){if(globalThis.uid=f,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${w.get("prolific_queue_name")}_${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.uid.startsWith("demo_paper")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{alert("Invalid user id."),console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{n=t,null!=v&&(c=parseInt(v)-1,console.log("Starting from",c)),g(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let x=!1;document.onvisibilitychange=()=>{x||(b+=1,x=!0,alert("Please don't leave the page. If you do so again, we may restrict paying you."),x=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,